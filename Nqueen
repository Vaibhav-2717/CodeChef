package Datastructure.Recursion;

import java.util.Scanner;

public class NQueen {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner sc= new Scanner(System.in);
		int n=sc.nextInt();
		
		placeNqueen(n);

	}
public static void placeNqueen(int n) {
	int board[][]=new int[n][n];
	placequeen(board,0,n);
}
public static void placequeen(int[][] board, int row, int n) {
	// TODO Auto-generated method stub
	if(row==n) {
		for(int i=0;i<n;i++) {
			for(int j=0;j<n;j++) {
				System.out.print(board[i][j]+" ");
			}
			System.out.println();
		}
		System.out.println();
	}
	for(int j=0;j<n;j++) {
		if(isboardsafe(board,row,j)) {
			board[row][j]=1;
			placequeen(board,row+1,n);
			board[row][j]=0;
		}
	}
}
private static boolean isboardsafe(int[][] board, int row, int col) {
	// TODO Auto-generated method stub
	int n=board.length;
	
	for(int i=row-1,j=col-1;i>=0&&j>=0;i--,j--) {
		if(board[i][j]==1) {
			return false;
		}
	}
	for(int i=row+1,j=col+1;i<n && j<n;i++,j++) {
		if(board[i][j]==1) {
			return false;
		}
	}
	for(int i=row-1,j=col+1;i>=0&&j<n;i--,j++) {
		if(board[i][j]==1) {
			return false;
		}
	}
	for(int i=row+1,j=col-1;i<n&&j>=0;i++,j--) {
		if(board[i][j]==1) {
			return false;
		}
	}
	for(int i=row-1;i>=0;i--) {
		if(board[i][col]==1) {
			return false;
		}
	}
	for(int i=row+1;i<n;i++) {
		if(board[i][col]==1) {
			return false;
		}
	}
	return true;
}
}
